# Generated by Django 4.1.6 on 2023-04-30 20:13
# Hand-edited with love by Josh a short time later <3

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


# tuple of "special" Group names to be used for Roles
ROLE_GROUPS = (
    'Cinema Manager',
    'Account Manager',
    'Club Representative',
    'Student',
)

def create_groups(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')  # django.contrib.auth.models.Group
    Group.objects.bulk_create(Group(name=n) for n in ROLE_GROUPS)

def delete_groups(apps, schema_editor):
    """
    Reverse migration in case anyone ever needs to undo this one for some reason
    """
    Group = apps.get_model('auth', 'Group')  # django.contrib.auth.models.Group
    Group.objects.filter(name__in=ROLE_GROUPS).delete()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0010_alter_group_name_max_length'),  # manually pegged because we need Groups to exist before creating them!
    ]

    operations = [
        migrations.RunPython(create_groups, delete_groups),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('M', 'Cinema Manager'), ('A', 'Account Manager'), ('R', 'Club Representative'), ('S', 'Student')], default='S', max_length=1)),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
